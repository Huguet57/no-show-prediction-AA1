library(MASS)
library(cclust)
install.packages("cclust")
install.packages("cclust")
install.packages('package_name', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages("cclust")
# 1. Carreguem dades
setwd("~/Documents/andreu/no-show-prediction-AA1/analysis")
dd.full <- read.csv("../data_numeric.csv",
fileEncoding = 'UTF-8')
# 3. Separem informació, identificadors i target
no.show <- dd.full[, 4]
dd.num <- dd.full[, -c(2, 4, 12)] # Patient ID, No.show nor Training
dd.num$DateDiff <- NULL
library(MASS)
# 3. Normalitzem
dd.num.s <- scale(dd.num)
# 5. Calculem les dimensions reduïdes
N <- nrow(dd.num.s)
d <- ncol(dd.num.s)
# 4. Separem training i test
bin.show <- as.numeric(no.show) - 1
dd.training <- as.matrix(dd.num.s[dd.full$Training == 1, ])
dd.test <- as.matrix(dd.num.s[dd.full$Training == 0, ])
show.training <- as.matrix(bin.show[dd.full$Training == 1])
show.test <- as.matrix(bin.show[dd.full$Training == 0])
# 5. Fem els datasets
df.training <- data.frame(dd.training[1:1000,],
no.show = show.training[1:1000])
df.test <- data.frame(dd.test[1:1000,],
no.show = show.test[1:1000])
library(randomForest)
# 6. Provem Random Forests
rf <- randomForest(no.show ~ .,
data = df.training)
# 1. Carreguem dades
setwd("~/Documents/andreu/no-show-prediction-AA1/analysis")
dd.full <- read.csv("../data_numeric.csv",
fileEncoding = 'UTF-8')
# 3. Separem informació, identificadors i target
no.show <- dd.full[, 4]
dd.num <- dd.full[, -c(2, 4, 12)] # Patient ID, No.show nor Training
dd.num$DateDiff <- NULL
library(MASS)
# 3. Normalitzem
dd.num.s <- scale(dd.num)
# 5. Calculem les dimensions reduïdes
N <- nrow(dd.num.s)
d <- ncol(dd.num.s)
# 4. Separem training i test
dd.training <- as.matrix(dd.num.s[dd.full$Training == 1, ])
dd.test <- as.matrix(dd.num.s[dd.full$Training == 0, ])
show.training <- no.show[dd.full$Training == 1]
show.test <- no.show[dd.full$Training == 0]
# 5. Fem els datasets
df.training <- data.frame(dd.training[1:1000,],
no.show = show.training[1:1000])
df.test <- data.frame(dd.test[1:1000,],
no.show = show.test[1:1000])
library(randomForest)
# 6. Provem Random Forests
rf <- randomForest(no.show ~ .,
data = df.training)
rf
?randomForest
pred <- predict(rf,
newdata = df.test)
summary(pred)
table(show.test, pred)
table(df.test$no.show, pred)
# 6. Provem Random Forests
rf <- randomForest(no.show ~ .,
data = df.training)
rf
pred <- predict(rf,
newdata = df.test)
table(df.test$no.show, pred)
(conf.tb <- table(df.test$no.show, pred))
(conf.tb <- table(df.test$no.show, pred))
sum(diag(conf.tb))/sum(conf.tb)
# 1. Carreguem dades
setwd("~/Documents/andreu/no-show-prediction-AA1/analysis")
dd.full <- read.csv("../data_numeric.csv",
fileEncoding = 'UTF-8')
# 3. Separem informació, identificadors i target
no.show <- dd.full[, 4]
dd.num <- dd.full[, -c(2, 4, 12)] # Patient ID, No.show nor Training
dd.num$DateDiff <- NULL
library(MASS)
# 3. Normalitzem
dd.num.s <- scale(dd.num)
# 5. Calculem les dimensions reduïdes
N <- nrow(dd.num.s)
d <- ncol(dd.num.s)
# 4. Separem training i test
dd.training <- as.matrix(dd.num.s[dd.full$Training == 1, ])
dd.test <- as.matrix(dd.num.s[dd.full$Training == 0, ])
show.training <- no.show[dd.full$Training == 1]
show.test <- no.show[dd.full$Training == 0]
# 5. Fem els datasets
df.training <- data.frame(dd.training[1:10000,],
no.show = show.training[1:10000])
df.test <- data.frame(dd.test[1:10000,],
no.show = show.test[1:10000])
library(randomForest)
# 6. Provem Random Forests
rf <- randomForest(no.show ~ .,
data = df.training)
rf
pred <- predict(rf,
newdata = df.test)
(conf.tb <- table(df.test$no.show, pred))
sum(diag(conf.tb))/sum(conf.tb)
# 6. Provem Random Forests
rf <- randomForest(no.show ~ .,
data = df.training)
rf
pred <- predict(rf,
newdata = df.test)
(conf.tb <- table(df.test$no.show, pred))
summary(pred)
rf
summary(df.test$no.show)
pred <- predict(rf,
newdata = df.test)
# 6. Provem Random Forests
rf <- randomForest(no.show ~ .,
data = df.training)
rf
summary(df.test$no.show)
pred <- predict(rf,
newdata = df.test)
summary(pred)
(conf.tb <- table(df.test$no.show, pred))
sum(diag(conf.tb))/sum(conf.tb)
# 1. Carreguem dades
setwd("~/Documents/andreu/no-show-prediction-AA1/analysis")
dd.full <- read.csv("../data_numeric.csv",
fileEncoding = 'UTF-8')
# 3. Separem informació, identificadors i target
no.show <- dd.full[, 4]
dd.num <- dd.full[, -c(2, 4, 12)] # Patient ID, No.show nor Training
dd.num$DateDiff <- NULL
library(MASS)
# 3. Normalitzem
dd.num.s <- scale(dd.num)
# 5. Calculem les dimensions reduïdes
N <- nrow(dd.num.s)
d <- ncol(dd.num.s)
# 4. Separem training i test
dd.training <- as.matrix(dd.num.s[dd.full$Training == 1, ])
dd.test <- as.matrix(dd.num.s[dd.full$Training == 0, ])
show.training <- no.show[dd.full$Training == 1]
show.test <- no.show[dd.full$Training == 0]
# 5. Fem els datasets
df.training <- data.frame(dd.training,
no.show = show.training)
df.test <- data.frame(dd.test,
no.show = show.test)
library(randomForest)
# 6. Provem Random Forests
rf <- randomForest(no.show ~ .,
data = df.training)
rf
summary(df.test$no.show)
pred <- predict(rf,
newdata = df.test)
summary(pred)
(conf.tb <- table(df.test$no.show, pred))
sum(diag(conf.tb))/sum(conf.tb)
rf$importance
sort(rf$importance)
order(rf$importance)
rf$importance[order(rf$importance)]
order(rf$importance)
rownames(rf$importance)
rownames(rf$importance)[order(rf$importance)]
?order
rownames(rf$importance)[order(rf$importance, decreasing = TRUE)]
# 1. Carreguem dades
setwd("~/Documents/andreu/no-show-prediction-AA1/analysis")
dd.full <- read.csv("../data_numeric.csv",
fileEncoding = 'UTF-8')
# 3. Separem informació, identificadors i target
no.show <- dd.full[, 4]
dd.num <- dd.full[, -c(2, 4, 12)] # Patient ID, No.show nor Training
dd.num$DateDiff <- NULL
library(MASS)
# 3. Normalitzem
dd.num.s <- scale(dd.num)
# 5. Calculem les dimensions reduïdes
N <- nrow(dd.num.s)
d <- ncol(dd.num.s)
# 4. Separem training i test
dd.training <- as.matrix(dd.num.s[dd.full$Training == 1, ])
dd.test <- as.matrix(dd.num.s[dd.full$Training == 0, ])
show.training <- no.show[dd.full$Training == 1]
show.test <- no.show[dd.full$Training == 0]
# 5. Fem els datasets
df.training <- data.frame(dd.training,
no.show = show.training)
df.test <- data.frame(dd.test,
no.show = show.test)
library(randomForest)
# 6. Provem Random Forests
rf <- randomForest(no.show ~ .,
data = df.training)
rownames(rf$importance)[order(rf$importance, decreasing = TRUE)]
summary(df.test$no.show)
pred <- predict(rf,
newdata = df.test)
summary(pred)
(conf.tb <- table(df.test$no.show, pred))
sum(diag(conf.tb))/sum(conf.tb)
install.packages("C50")
# 7. C.5
library(C50)
# 7. C.5
library(C50)
C50Tree <- C5.0(no.show ~ .,
data = df.training)
# 1. Carreguem dades
setwd("~/Documents/andreu/no-show-prediction-AA1/analysis")
dd.full <- read.csv("../data_numeric.csv",
fileEncoding = 'UTF-8')
# 3. Separem informació, identificadors i target
no.show <- dd.full[, 4]
dd.num <- dd.full[, -c(2, 4, 12)] # Patient ID, No.show nor Training
dd.num$DateDiff <- NULL
library(MASS)
# 3. Normalitzem
dd.num.s <- scale(dd.num)
# 5. Calculem les dimensions reduïdes
N <- nrow(dd.num.s)
d <- ncol(dd.num.s)
# 4. Separem training i test
dd.training <- as.matrix(dd.num.s[dd.full[1:1000,]$Training == 1, ])
dd.test <- as.matrix(dd.num.s[dd.full$Training == 0, ])
show.training <- no.show[dd.full[1:1000,]$Training == 1]
show.test <- no.show[dd.full$Training == 0]
# 5. Fem els datasets
df.training <- data.frame(dd.training,
no.show = show.training)
df.test <- data.frame(dd.test,
no.show = show.test)
library(randomForest)
# 6. Provem Random Forests
rf <- randomForest(no.show ~ .,
data = df.training)
rownames(rf$importance)[order(rf$importance, decreasing = TRUE)]
summary(df.test$no.show)
pred <- predict(rf,
newdata = df.test)
summary(pred)
(conf.tb <- table(df.test$no.show, pred))
sum(diag(conf.tb))/sum(conf.tb)
# 7. C.5
library(C50)
C50Tree <- C5.0(no.show ~ .,
data = df.training)
C50Tree
# 5. Fem els datasets
df.training <- data.frame(dd.training[1:1000,],
no.show = show.training[1:1000,])
# 1. Carreguem dades
setwd("~/Documents/andreu/no-show-prediction-AA1/analysis")
dd.full <- read.csv("../data_numeric.csv",
fileEncoding = 'UTF-8')
# 3. Separem informació, identificadors i target
no.show <- dd.full[, 4]
dd.num <- dd.full[, -c(2, 4, 12)] # Patient ID, No.show nor Training
dd.num$DateDiff <- NULL
library(MASS)
# 3. Normalitzem
dd.num.s <- scale(dd.num)
# 5. Calculem les dimensions reduïdes
N <- nrow(dd.num.s)
d <- ncol(dd.num.s)
# 4. Separem training i test
dd.training <- as.matrix(dd.num.s[dd.full$Training == 1, ])
dd.test <- as.matrix(dd.num.s[dd.full$Training == 0, ])
show.training <- no.show[dd.full$Training == 1]
show.test <- no.show[dd.full$Training == 0]
# 5. Fem els datasets
df.training <- data.frame(dd.training[1:1000,],
no.show = show.training[1:1000])
df.test <- data.frame(dd.test,
no.show = show.test)
library(randomForest)
# 6. Provem Random Forests
rf <- randomForest(no.show ~ .,
data = df.training)
rownames(rf$importance)[order(rf$importance, decreasing = TRUE)]
summary(df.test$no.show)
pred <- predict(rf,
newdata = df.test)
summary(pred)
(conf.tb <- table(df.test$no.show, pred))
sum(diag(conf.tb))/sum(conf.tb)
# 7. C.5
library(C50)
C50Tree <- C5.0(no.show ~ .,
data = df.training)
C50Tree
pred.c5 <- predict(C50Tree,
newdata = df.test,
type = "prob")
pred.c5
summary(pred.c5)
pred.c5
pred.c5 <- predict(C50Tree,
newdata = df.test,
type = "class")
summary(pred.c5)
pred.c5 <- predict(C50Tree,
newdata = df.test,
type = "class")
summary(pred.c5)
table(df.test$no.show, pred.c5)
sum(diag(cf.tb))/sum(cf.tb)
(cf.tb <- table(df.test$no.show, pred.c5))
sum(diag(cf.tb))/sum(cf.tb)
# 1. Carreguem dades
setwd("~/Documents/andreu/no-show-prediction-AA1/analysis")
dd.full <- read.csv("../data_numeric.csv",
fileEncoding = 'UTF-8')
# 3. Separem informació, identificadors i target
no.show <- dd.full[, 4]
dd.num <- dd.full[, -c(2, 4, 12)] # Patient ID, No.show nor Training
dd.num$DateDiff <- NULL
library(MASS)
# 3. Normalitzem
dd.num.s <- scale(dd.num)
# 5. Calculem les dimensions reduïdes
N <- nrow(dd.num.s)
d <- ncol(dd.num.s)
# 4. Separem training i test
dd.training <- as.matrix(dd.num.s[dd.full$Training == 1, ])
dd.test <- as.matrix(dd.num.s[dd.full$Training == 0, ])
show.training <- no.show[dd.full$Training == 1]
show.test <- no.show[dd.full$Training == 0]
# 5. Fem els datasets
df.training <- data.frame(dd.training,
no.show = show.training)
df.test <- data.frame(dd.test,
no.show = show.test)
library(randomForest)
# 6. Provem Random Forests
# rf <- randomForest(no.show ~ .,
#                    data = df.training)
rownames(rf$importance)[order(rf$importance, decreasing = TRUE)]
summary(df.test$no.show)
pred <- predict(rf,
newdata = df.test)
summary(pred)
(conf.tb <- table(df.test$no.show, pred))
sum(diag(conf.tb))/sum(conf.tb)
# 7. C.5
library(C50)
C50Tree <- C5.0(no.show ~ .,
data = df.training)
C50Tree
pred.c5 <- predict(C50Tree,
newdata = df.test,
type = "class")
summary(pred.c5)
(cf.tb <- table(df.test$no.show, pred.c5))
sum(diag(cf.tb))/sum(cf.tb)
# 1. Carreguem dades
setwd("~/Documents/andreu/no-show-prediction-AA1/analysis")
dd.full <- read.csv("../data_numeric.csv",
fileEncoding = 'UTF-8')
# 3. Separem informació, identificadors i target
no.show <- dd.full[, 4]
dd.num <- dd.full[, -c(2, 4, 12)] # Patient ID, No.show nor Training
dd.num$DateDiff <- NULL
library(MASS)
# 3. Normalitzem
dd.num.s <- scale(dd.num)
# 5. Calculem les dimensions reduïdes
N <- nrow(dd.num.s)
d <- ncol(dd.num.s)
# 4. Separem training i test
dd.training <- as.matrix(dd.num.s[dd.full$Training == 1, ])
dd.test <- as.matrix(dd.num.s[dd.full$Training == 0, ])
show.training <- no.show[dd.full$Training == 1]
show.test <- no.show[dd.full$Training == 0]
# 5. Fem els datasets
df.training <- data.frame(dd.training,
no.show = show.training)
df.test <- data.frame(dd.test,
no.show = show.test)
library(randomForest)
# 6. Provem Random Forests
# rf <- randomForest(no.show ~ .,
#                    data = df.training)
rownames(rf$importance)[order(rf$importance, decreasing = TRUE)]
summary(df.test$no.show)
pred <- predict(rf,
newdata = df.test)
summary(pred)
(conf.tb <- table(df.test$no.show, pred))
sum(diag(conf.tb))/sum(conf.tb)
# 7. C.5
library(C50)
C50Tree <- C5.0(no.show ~ .,
data = df.training)
C50Tree
pred.c5 <- predict(C50Tree,
newdata = df.test,
type = "class")
summary(pred.c5)
(cf.tb <- table(df.test$no.show, pred.c5))
sum(diag(cf.tb))/sum(cf.tb)
